<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Comparable on Rodrigo Martins </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://limitless-eyrie-46143.herokuapp.com/categories/comparable/</link>
    <language>en-us</language>
    
    <copyright>I&#39;m a Catholic Christian, software developer, passionate about life, codes, questions, theories and theorems. :)</copyright>
    <updated>Sun, 20 May 2012 00:00:00 UTC</updated>
    
    <item>
      <title>classe objects em ruby 1 dot 9 2 part iv</title>
      <link>https://limitless-eyrie-46143.herokuapp.com/post/2012/05/20/classe-objects-em-ruby-1-dot-9-2-part-iv/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 UTC</pubDate>
      
      <guid>https://limitless-eyrie-46143.herokuapp.com/post/2012/05/20/classe-objects-em-ruby-1-dot-9-2-part-iv/</guid>
      <description>&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://ruby-doc.org/core-1.9.3/Object.html&#34;&gt;Objects&lt;/a&gt;, é hora de nos aprofundar.&lt;/p&gt;

&lt;h1&gt;Objetos&lt;/h1&gt;

&lt;h3&gt;Ordem de Object&lt;/h3&gt;

&lt;p&gt;Praticamente todas as classes podem definir o método ==, sendo útil para testar as suas instâncias para a igualdade. Algumas
classes também podem definir uma ordenação. Ou seja: para quaisquer duas instâncias de uma classe, as duas instâncias devem ser iguais,
ou uma instância deve ser &amp;ldquo;menos que&amp;rdquo; a outra. Numbers são das classes mais óbvias para que tal ordenação seja definido.
String são também ordena, de acordo com o numéro de ordenação dos códigos de caracteres que compõem as strings. Se uma classe define
uns casos de pedido, em seguida, a classe pode ser comparada e classificada.&lt;/p&gt;

&lt;p&gt;Em Ruby, classes definem um ordenação através da implementação do operador &amp;lt;=&amp;gt;. Este operador deve retornar -1 se o operando da esquerda
é menor que o operando da direita, 0 se os dois operandos são iguais, e 1 se o operando esquerdo é maior que o operando direito.
Se os dois operandos não podem ser   significativamente comparados (se o operando direito é de uma classe diferente, por exemplo),
em seguida, o operador deve retornar nil:&lt;/p&gt;

&lt;p&gt;``` ruby Operador &amp;lt;=&amp;gt;
1 &amp;lt;=&amp;gt; 5 # -1
5 &amp;lt;=&amp;gt; 5 # 0
9 &amp;lt;=&amp;gt; 5 # 1
&amp;ldquo;1&amp;rdquo; &amp;lt;=&amp;gt; 5 # nil: inteiros e strings não são comparáveis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
O operador &amp;lt;=&amp;gt; é tudo que é necessário para comparar os valores. Mas não é particularmente intuitivo. Assim, as classes que definem
este operador tipicamente também incluir o Módulo &amp;lt;a href=&amp;quot;http://ruby-doc.org/core-1.9.2/Comparable.html&amp;quot;&amp;gt;Comparable&amp;lt;/a&amp;gt; como um mixin.
(Módulos e mixins são abordados em Módulos como Mixins). O mixin Comparable define o seguinte operador em termos de &amp;lt;=&amp;gt;:

	&amp;lt; 	-	Menor que
	&amp;lt;=	-	Menor ou igual
	==	-	Igual
	&amp;gt;=	-	Maior ou igual
	&amp;gt;	-	Maior que

&amp;lt;a href=&amp;quot;http://ruby-doc.org/core-1.9.2/Comparable.html&amp;quot;&amp;gt;Comparable&amp;lt;/a&amp;gt; não define o operador !=; o Ruby automaticamente define o
operador como a negação do operador ==. Além destes operadores de comparação, &amp;lt;a href=&amp;quot;http://ruby-doc.org/core-1.9.2/Comparable.html&amp;quot;&amp;gt;Comparable&amp;lt;/a&amp;gt; também define um método útil de comparação com o between? :

``` ruby Comparable between?
1.between?(0,10) # verdadeiro: 0 &amp;lt;= 1 &amp;lt;= 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Se o operador &amp;lt;=&amp;gt; retornar nil, todos os operadores de comparação dele derivados retornam falso. O especial Float com valor NaN é um exemplo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby Float NaN
nan = 0.0/0.0; # zero dividido por zero não é um número
nan &amp;lt; 0 # false: não é menor que zero
nan &amp;gt; 0 # false: não é maior que zero
nan == 0 # false: não é igual a zero
nan == nan # false: não é mesmo igual a si mesmo!
nan.equal?(nan) # isso é verdade, claro
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Observe que a definição de &amp;lt;=&amp;gt; e incluindo o módulo &lt;a href=&#34;http://ruby-doc.org/core-1.9.2/Comparable.html&#34;&gt;Comparable&lt;/a&gt; define um operador == para o sua classe. Algumas classes que definem o seu próprio operador ==, normalmente quando eles podem
implementar esta forma mais eficiente do que um teste de igualdade com base no operador &amp;lt;=&amp;gt;. É possível definir classes que
implementam diferentes noções de igualdade em seus operadores == e &amp;lt;=&amp;gt;. Uma classe pode fazer comparações de string case-sensitive
para o operador ==, por exemplo, mas, em seguida, fazem comparações de maiúsculos e minúsculos com &amp;lt;=&amp;gt;, de modo que as instâncias da classe
se classificam com mais naturalidade. Em geral, porém, é melhor se &amp;lt;=&amp;gt; retorna 0 se e somente se == retorna true.&lt;/p&gt;

&lt;p&gt;É isso amigos&amp;hellip; o proximo post vamos conversar um pouco de Conversões de Object&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Até Mais..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
