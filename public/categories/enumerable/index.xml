<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Enumerable on Rodrigo Martins </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://rodij.me/categories/enumerable/</link>
    <language>en-us</language>
    
    <copyright>I&#39;m a Catholic Christian, software developer, Passionate about life, codes, questions, theories and theorems. :)</copyright>
    <updated>Sun, 05 Aug 2012 00:00:00 UTC</updated>
    
    <item>
      <title>escrevendo iteradores personalizados number ruby 1 dot 9 2</title>
      <link>http://rodij.me/post/2012/08/05/escrevendo-iteradores-personalizados-number-ruby-1-dot-9-2/</link>
      <pubDate>Sun, 05 Aug 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/08/05/escrevendo-iteradores-personalizados-number-ruby-1-dot-9-2/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.2/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar falando um pouco de `Escrevendo iteradores personalizados`... Estranho para alguns, mas, veremos que é simples!&lt;/p&gt;

&lt;h1&gt;Escrevendo iteradores personalizados&lt;/h1&gt;

&lt;p&gt;A definição de característica de um método &lt;code&gt;Iterator&lt;/code&gt;, é que ele invoca um bloco de código associado com a
invocação do método. Você faz isso com a declaração &lt;code&gt;yield&lt;/code&gt;. O método que se segue é um iterador trivial que apenas
invoca o seu bloco duas vezes:&lt;/p&gt;

&lt;p&gt;```ruby yield
def twice
  yield
  yield
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Para passar valores de argumento para o bloco, veja a declaração do `yield` com uma lista separada por vírgulas de
expressões. Tal como acontece com invocação de método, os valores dos argumentos podem, opcionalmente, ser colocada
com parênteses. O iterador simples a seguir mostra uma utilização do `yield`:

```ruby Method
# Este método espera um bloco. Gera n valores da forma
# M * i + c, para i de 0 .. n-1, e os yield deles, um de cada vez,
# Para o bloco associado.
def sequencia(n, m, c)
  i = 0
  while (i &amp;lt; n) # loop n vezes
    yield m * i + c # Invocar o bloco, e passar um valor a ela
    i += 1 # Incrementa i de cada vez
  end
end

# Aqui está uma invocação desse método, com um bloco.
# Ela imprime os valores 1, 6 e 11
sequencia(3, 5, 1) {| y | puts y}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nomenclatura: rendimento e iteradores

Dependendo da sua experiência em programação, você pode encontrar os
termos &amp;quot;yield&amp;quot; e &amp;quot;iterator&amp;quot;. O método de sequencia mostrado anteriormente é
um bom exemplo claro de por que o &#39;yield&#39; tem o nome do que ele faz. Depois de calcular cada número
na sequencia, o método &#39;yield&#39; de controle (e produz o número calculado) para o bloco,
de modo que o bloco pode trabalhar com ele. Nem sempre é isso claro,
no entanto, em algum código que possa parecer como se fosse o bloco que é
produzindo um resultado de volta para o método que o invocou.

Um método como sequencia que espera um bloco e invoca-lo várias vezes é chamado de
&#39;iterador&#39;, porque parece e se comporta como um loop. Isso pode ser confuso se você está
acostumado a linguagens como Java em que iteradores são objetos. Em Java, o código que o cliente usa,
o iterador está no controle e &#39;puxa&#39; os valores do iterador quando ela precisa deles.
Em Ruby, o método iterator está no controle e &#39;empurra&#39; os valores para o bloco que quer.

Este problema de nomenclatura está relacionada com a distinção entre &#39;Iteradores interno&#39;
e &#39;iteradores externos&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aqui está outro exemplo de um &amp;lsquo;iterador&amp;rsquo; em Ruby; ele passa dois argumentos para o seu bloco. Vale notar
que a implementação deste iterador usa outro iterador internamente:&lt;/p&gt;

&lt;p&gt;```ruby  yield&lt;/p&gt;

&lt;h1 id=&#34;gera-n-pontos-uniformemente-espaçados-em-torno-da-circunferência-de-um&#34;&gt;Gera n pontos uniformemente espaçados em torno da circunferência de um&lt;/h1&gt;

&lt;h1 id=&#34;círculo-de-raio-r-centrado-em-0-0-rendimento-da-coordenadas-x-e-y&#34;&gt;Círculo de raio r centrado em (0,0). Rendimento da coordenadas X e Y&lt;/h1&gt;

&lt;h1 id=&#34;de-cada-ponto-ao-bloco-associado&#34;&gt;De cada ponto ao bloco associado.&lt;/h1&gt;

&lt;p&gt;def circle(r,n)
  n.times do |i|    #  Observe que este método é implementado com um bloco
    angle = Math::PI * 2 * i / n
    yield r*Math.cos(angle), r*Math.sin(angle)
  end
end&lt;/p&gt;

&lt;h1 id=&#34;esta-invocação-das-impressões-iterador&#34;&gt;Esta invocação das impressões iterador:&lt;/h1&gt;

&lt;h1 id=&#34;1-00-0-00-0-00-1-00-1-00-0-00-0-00-1-00&#34;&gt;(1,00, 0,00) (0,00, 1,00) (-1,00, 0,00) (-0,00, -1,00)&lt;/h1&gt;

&lt;p&gt;circle(1,4) {|x,y| printf &amp;ldquo;(%.2f, %.2f)&amp;rdquo;, x, y }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Usando a palavra-chave `yield` realmente é muito parecido com invocação de um método.
Parênteses nos argumentos são opcionais. Você pode usar `*` para expandir uma matriz de argumentos
individuais. `yield` ainda permite que você passe um hash literal sem as chaves ao seu redor. Ao contrário
de uma invocação de método, no entanto, uma expressão `yield` pode não ser seguido por um bloco.
Você não pode passar um bloco a um bloco.

Se um método é invocado sem um bloco, é um erro para o método `yield`, porque não há nada para `yield`. Às vezes
você querer escrever um método que produz a um bloco se for fornecido, mas tem alguma ação padrão (outro de lançar
um erro), se invocado com nenhum bloco. Para fazer isso, use `block_given?` para determinar se há um bloco
associado com a chamada. `block_given?`, e seu sinônimo `iterator?`, são métodos do Kernel, então eles agem como
funções mundiais. Aqui está um exemplo:

```ruby block_biven?
# Retorna um array com n elementos da forma m * i + c
# Se um bloco é dado, igualmente produzir cada elemento para o bloco
def sequence(n, m, c)
  i, s = 0, []                  # Inicializa variáveis
  while(i &amp;lt; n)                  # Loop n vezes
    y = m*i + c                 # calcula o valor
    yield y if block_given?
    s &amp;lt;&amp;lt; y                      # armazena o valor
    i += 1
  end
  s             # Retorna o array de valores
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É isso aí!&lt;/p&gt;

&lt;p&gt;Até o proximo!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>objetos enumeraveis number ruby 1 dot 9 2</title>
      <link>http://rodij.me/post/2012/07/25/objetos-enumeraveis-number-ruby-1-dot-9-2/</link>
      <pubDate>Wed, 25 Jul 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/07/25/objetos-enumeraveis-number-ruby-1-dot-9-2/</guid>
      <description>&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.2/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar falando um pouco de `Objetos Enumeráveis`... Estranho para alguns, mas, veremos que é simples!&lt;/p&gt;

&lt;h1&gt;Objetos Enumeráveis&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Range&lt;/code&gt;, &lt;code&gt;Hash&lt;/code&gt;, e um número de outras classes definem um iterador &lt;code&gt;each&lt;/code&gt; que passa cada elemento da
coleção para o bloco associado. Este é talvez o mais comumente usado iterador em Ruby, o loop só funciona para
iterar sobre objetos que têm o método &lt;code&gt;each&lt;/code&gt;. Exemplos de iteradores &lt;code&gt;each&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;```ruby Metodo each
[1,2,3].each {|x| print x }   # =&amp;gt; prints &amp;ldquo;123&amp;rdquo;
(1..3).each  {|x| print x }   # =&amp;gt; prints &amp;ldquo;123&amp;rdquo; Same as 1.upto(3)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
O iterador `each` não é só para as classes tradicionais &amp;quot;de estrutura de dados&amp;quot;. Classes `IO` Ruby definem um
iterador `each` que cada linha de texto lido do objeto produz `Input/Output`. Assim, você pode processar as linhas
de um arquivo em Ruby com um código como esse:

```ruby Metodo each para File
File.open(filename) do |f|       # Abrir arquivo nomeado, passando f como parametro
  f.each {|line| print line }    # Imprimir f em cada linha
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A maioria das classes que definem um método &lt;code&gt;each&lt;/code&gt; também incluem o módulo &lt;code&gt;Enumerable&lt;/code&gt;, que define um número de
iteradores mais especializados que são implementados em cima do método &lt;code&gt;each&lt;/code&gt;. Um iterador é útil tal &lt;code&gt;each_with_index&lt;/code&gt;, o que nos permite adicionar a linha de numeração para o exemplo anterior:&lt;/p&gt;

&lt;p&gt;``` ruby Metodo each com Index
File.open(filename) do |f|
  f.each_with_index do |line,number|
    print &amp;ldquo;#{number}: #{line}&amp;rdquo;
  end
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Alguns dos iteradores mais comumentes utilizados são os métodos `Enumerable`, `collect`, `select`, `reject`, e
`inject`. O método `collect` (também conhecido como `map`) executa o seu bloco associado para cada elemento do objeto
enumerável, e coleta os valores de retorno dos blocos em um `array`:

```ruby Metodo Collect
quadrados = [1,2,3].collect {|x| x*x}   # =&amp;gt; [1,4,9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O método &lt;code&gt;select&lt;/code&gt; invoca o bloco associado para cada elemento no objeto enumerável, e retorna uma matriz de
elementos para a qual o bloco retorna um outro valor &lt;code&gt;false&lt;/code&gt; ou &lt;code&gt;nil&lt;/code&gt;. Por exemplo:&lt;/p&gt;

&lt;p&gt;```ruby Metodo Select
nivela = (1..10).select{|x| x%2 == 0} # =&amp;gt; [2,4,6,8,10]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
O método `reject` é simplesmente o oposto de `select`, ele retorna uma matriz de elementos para a qual o bloco
retorna `nil` ou `false`. Por exemplo:

```ruby Metodo reject
odds = (1..10).reject{|x| x%2 == 0} # =&amp;gt; [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O método &lt;code&gt;inject&lt;/code&gt; é um pouco mais complicado do que os outros. Ele invoca o bloco associado com dois argumentos.
O primeiro argumento é um valor acumulado de algum tipo das iterações anteriores. O segundo argumento é o próximo
o objeto enumerável. O valor de retorno do bloco é o primeiro argumento bloqueado para a próxima iteração, ou torna-
se o valor de retorno do iterador após a última iteração. O valor inicial da variável acumula ou é o argumento de
&lt;code&gt;inject&lt;/code&gt;, se houver um, ou o primeiro elemento do objeto enumerável. (Neste caso, o bloco é invocado. Apenas uma vez durante os primeiros dois elementos). Exemplos para &lt;code&gt;injects&lt;/code&gt; mais claros:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby Metodo Inject
data = [2, 5, 3, 4]
sum = data.inject{|sum, x| sum + x }      # =&amp;gt; 14    (2+5+3+4)
floatprod = data.inject(1.0){|p,x| p*x }  # =&amp;gt; 120.0 (1.0*2*5*3*4)
max = data.inject{|m,x| m&amp;gt;x ? m : x }     # =&amp;gt; 5     (elemento maior)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Veja &lt;a href=&#34;http://ruby-doc.org/core-1.9.2/Enumerable.html&#34;&gt;Objetos Enumeráveis&lt;/a&gt; ​​para obter mais detalhes sobre o &lt;code&gt;Módulo Enumerable&lt;/code&gt; e a seus iteradores.&lt;/p&gt;

&lt;p&gt;Até a proxima amigos&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>unless number ruby 1 dot 9</title>
      <link>http://rodij.me/post/2012/07/05/unless-number-ruby-1-dot-9/</link>
      <pubDate>Thu, 05 Jul 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/07/05/unless-number-ruby-1-dot-9/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.2/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar falando um pouco de `unless`... Estranho para alguns, mas, veremos que é simples!&lt;/p&gt;

&lt;h1&gt;Unless&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;unless&lt;/code&gt;, como uma declaração ou um modificador, é o oposto do &lt;code&gt;case&lt;/code&gt;: ele executa o código apenas se uma expressão
associada é avaliada como &lt;code&gt;false&lt;/code&gt; ou &lt;code&gt;nil&lt;/code&gt;. Sua sintaxe é como &lt;code&gt;if&lt;/code&gt;, exceto que as cláusulas &lt;code&gt;elsif&lt;/code&gt;, que não são
permitidas:&lt;/p&gt;

&lt;p&gt;``` ruby Declaração unless&lt;/p&gt;

&lt;h1 id=&#34;uma-maneira-declaração-unless&#34;&gt;Uma maneira, declaração unless&lt;/h1&gt;

&lt;p&gt;unless condition
  code
end&lt;/p&gt;

&lt;h1 id=&#34;duas-vias-da-declaração-unless&#34;&gt;Duas vias da declaração unless&lt;/h1&gt;

&lt;p&gt;unless condition
  code
else
  code
end&lt;/p&gt;

&lt;h1 id=&#34;modificador-unless&#34;&gt;modificador unless&lt;/h1&gt;

&lt;p&gt;code unless condition&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
A declaração `unless`, como a declaração `if`, exige que a condição e o código são separados por uma mudança de linha,
uma vírgula, ou a palavra-chave `then`. Também como `if`, as declarações `unless` são expressões e retornam o valor do
código que são executados, ou `nil` se executar nada:

``` ruby Declaração unless
# Chama o método to_s sobre o objeto, a menos que o objeto &#39;o&#39; for nulo
s = unless o.nil?                        # Nova linha de separação
  o.to_s
end

s = unless o.nil? then o.to_s end        # separador então
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para uma única linha condicionais como esta, a forma do modificador &lt;code&gt;unless&lt;/code&gt; é geralmente mais clara:&lt;/p&gt;

&lt;p&gt;``` ruby Unless
s = o.to_s unless o.nil?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Ruby não tem nenhum equivalente da cláusula `elsif` para a condicional `unless`. Você ainda pode escrever um multiway da instrução `unless`, no entanto, se você está disposto a ser um pouco mais detalhado:

``` ruby unless
unless x == 0
  puts &amp;quot;x is not 0&amp;quot;
else
  unless y == 0
    puts &amp;quot;y is not 0&amp;quot;
  else
    unless z == 0
      puts &amp;quot;z is not 0&amp;quot;
    else
      puts &amp;quot;all are 0&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É isso ai amigos!&lt;/p&gt;

&lt;p&gt;Para todos aqueles que não sabiam ao certo o que seria o &lt;code&gt;unless&lt;/code&gt;, e que tipo de monstro é isso..&lt;/p&gt;

&lt;p&gt;Esta ai..&lt;/p&gt;

&lt;p&gt;Até a proxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>atribuicao paralela number ruby</title>
      <link>http://rodij.me/post/2012/06/11/atribuicao-paralela-number-ruby/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/06/11/atribuicao-paralela-number-ruby/</guid>
      <description>&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.2/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar falando um pouco de Atribuições Paralelas&lt;/p&gt;

&lt;h1&gt;Atribuições Paralelas&lt;/h1&gt;

&lt;p&gt;Atribuição paralela é qualquer atribuição de expressão que tem mais do que um &lt;code&gt;lvalue&lt;/code&gt;, mais do que um &lt;code&gt;rvalue&lt;/code&gt;, ou ambos. Múltiplos &lt;code&gt;lvalues&lt;/code&gt; e ​​múltiplos &lt;code&gt;rvalues&lt;/code&gt; são separados uns dos outros com uma vírgula. &lt;code&gt;lvalues&lt;/code&gt; e &lt;code&gt;rvalues&lt;/code&gt; ​​pode ser prefixado com &lt;code&gt;*&lt;/code&gt;, que às vezes é chamado de operador &lt;code&gt;splat&lt;/code&gt;, embora não seja um verdadeiro operador. O significado de &lt;code&gt;*&lt;/code&gt; é explicado mais adiante neste post.&lt;/p&gt;

&lt;p&gt;Expressões de atribuição mais paralelas são simples, e é óbvio que eles significam. Existem alguns casos complicados, no entanto, e os subtitulos seguintes explicam todas as possibilidades.&lt;/p&gt;

&lt;h5&gt;Mesmo número de lvalues ​​e rvalues&lt;/h5&gt;

&lt;p&gt;Atribuição paralela é a sua forma mais simples quando não são os mesmos número de &lt;code&gt;lvalues&lt;/code&gt; ​​e &lt;code&gt;rvalues&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;``` ruby Atribuição de Mesmo número
x, y, z = 1, 2, 3 # x = 1; y = 2; z = 3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Neste caso, o primeiro `rvalue` é atribuído ao primeiro `lvalue`; o segundo `rvalue` é atribuído ao segundo `lvalue`, e assim por diante.

Estas atribuições são efetivamente executadas em paralelo, não seqüencialmente. Por exemplo, as seguintes duas linhas não são as mesmas:

``` ruby Atribuição
x, y = y, x # Paralela: trocar o valor de duas variáveis
x = y; y = x # seqüencial: ambas as variáveis ​​têm o mesmo valor
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Um lvalue, ​​múltiplos rvalues&lt;/h5&gt;

&lt;p&gt;Quando há um único &lt;code&gt;lvalue&lt;/code&gt; e mais do que um &lt;code&gt;rvalue&lt;/code&gt;, Ruby cria um &lt;code&gt;array&lt;/code&gt; para armazenar os &lt;code&gt;rvalues&lt;/code&gt; ​​e atribui esse &lt;code&gt;array&lt;/code&gt; para o &lt;code&gt;lvalue&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;``` ruby Um lvalue e Múltiplos rvalues
x = 1, 2, 3 # x = [1,2,3]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Você pode colocar um `*` antes do lvalue sem alterar o significado ou o valor de retorno desta atribuição.

Se você quiser impedir que os ​múltiplos `rvalues` de serem combinados em um único `array`, siga o `lvalue` com uma vírgula. Mesmo sem um lvalue depois da vírgula, isto torna que o Ruby se comporte como se há ​​múltiplos lvalues:

``` ruby Atribuições
x, = 1, 2, 3 # x = 1; outros valores são descartados
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;M​últiplos lvalues, array único de rvalue&lt;/h5&gt;

&lt;p&gt;Quando existem múltiplos &lt;code&gt;lvalues​&lt;/code&gt; e apenas um único &lt;code&gt;rvalue&lt;/code&gt;, Ruby tenta expandir o rvalue em uma &lt;code&gt;lista&lt;/code&gt; de valores a atribuir. Se o &lt;code&gt;rvalue&lt;/code&gt; é um &lt;code&gt;array&lt;/code&gt;, Ruby expande o &lt;code&gt;array&lt;/code&gt; para que cada elemento torna-se seu próprio &lt;code&gt;rvalue&lt;/code&gt;. Se o &lt;code&gt;rvalue&lt;/code&gt; não é um &lt;code&gt;array&lt;/code&gt;, mas implementa um método &lt;code&gt;to_ary&lt;/code&gt;, Ruby invoca esse método e, em seguida, se expande o &lt;code&gt;array&lt;/code&gt; no retorno:&lt;/p&gt;

&lt;p&gt;```ruby Atribuição
x, y, z = [1, 2, 3] # mesmo que x, y, z = 1,2,3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
A atribuição paralela foi transformado de modo que há ​​múltiplos `lvalues` e zero (se expandida o `array` estando `empty`) ou mais `rvalues`. Se o número de `lvalues` ​​e `rvalues` ​​são os mesmos, então a atribuição ocorre conforme descrito anteriormente, Mesmo número de lvalues ​​e rvalues`. Se os números são diferentes, então a atribuição ocorre como descrito a seguir em `Diferentes números de lvalues ​​e rvalues`.

Podemos usar o truque de fuga por vírgula descrito acima para transformar uma sessão ordinária não paralela em uma atribuição que automaticamente descompacta um `array` à direita:

``` ruby Atribuição
x = [1,2] # x torna-se [1,2]: isso não é atribuição paralela
x, = [1,2] # x torna-se 1: da vírgula torna paralelo
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Diferentes números de lvalues ​​e rvalues&lt;/h5&gt;

&lt;p&gt;Se houver &lt;code&gt;lvalues&lt;/code&gt; mais do que ​​&lt;code&gt;rvalues&lt;/code&gt;, e nenhum operador &lt;code&gt;splat&lt;/code&gt; é envolvido, em seguida, o primeiro &lt;code&gt;rvalue&lt;/code&gt; é atribuído ao primeiro &lt;code&gt;lvalue&lt;/code&gt;, o segundo &lt;code&gt;rvalue&lt;/code&gt; é atribuído ao segundo &lt;code&gt;lvalue&lt;/code&gt;, e assim por diante, até todos os &lt;code&gt;rvalues&lt;/code&gt; ​​forem atribuídos. Em seguida, cada um dos restantes &lt;code&gt;lvalues&lt;/code&gt; ​​é atribuído nil, substituindo qualquer valor existente para que &lt;code&gt;lvalue&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;``` ruby Atribuição
x, y, z = 1, 2 # x = 1; y = 2; z = nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Se houver `rvalues` mais do que ​`​lvalues`, e nenhum operador `splat` é envolvido, em seguida, os `rvalues` ​são atribuídos em ordem a cada um dos `lvalues`, e os restantes `rvalues` são descartados :

```ruby Atribuição
x, y = 1, 2, 3 # x = 1; y = 2, 3 não é atribuído
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;O operador splat&lt;/h5&gt;

&lt;p&gt;Quando um &lt;code&gt;rvalue&lt;/code&gt; é precedido por um asterisco(&lt;code&gt;*&lt;/code&gt;), isso significa que o referido valor é um &lt;code&gt;array&lt;/code&gt; e que seus elementos devem ser cada um &lt;code&gt;rvalues&lt;/code&gt;. Os elementos do &lt;code&gt;array&lt;/code&gt; substituem o &lt;code&gt;array&lt;/code&gt; na lista original do &lt;code&gt;rvalue&lt;/code&gt;, e a atribuição procede como descrito abaixo:&lt;/p&gt;

&lt;p&gt;``` ruby Atribuição
x, y, z = 1, * [2,3] # mesmo que x, y, z = 1,2,3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
No Ruby 1.8, um splat só pode aparecer antes do último `rvalue` em uma atribuição. No Ruby 1.9, a lista de `rvalues` ​​em uma atribuição paralela pode ter qualquer número de `splats`, e eles podem aparecer em qualquer posição na lista. Não é legal, porém, em qualquer versão da linguagem, para tentar um &amp;quot;splat double&amp;quot; em uma lista aninhada:

```ruby Erro de Atribuição
x,y = **[[1,2]]   # SyntaxError!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Os &lt;code&gt;rvalues&lt;/code&gt; com i​ntervalo de &lt;code&gt;arrays&lt;/code&gt; e de &lt;code&gt;hash&lt;/code&gt; pode ser &lt;code&gt;splatted&lt;/code&gt;. Em geral, qualquer &lt;code&gt;rvalue&lt;/code&gt; que define um método &lt;code&gt;to_a&lt;/code&gt; pode ser prefixado com um &lt;code&gt;splat&lt;/code&gt;. Qualquer objeto &lt;a href=&#34;http://ruby-doc.org/core-1.9.3/Enumerable.html&#34;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt;, incluindo enumeradores pode ser &lt;code&gt;splatted&lt;/code&gt;, por exemplo. Quando um &lt;code&gt;splat&lt;/code&gt; é aplicado a um objecto que não define um método &lt;code&gt;to_a&lt;/code&gt;, nenhuma expansão é realizada e o &lt;code&gt;splat&lt;/code&gt; avaliado como o próprio objeto.&lt;/p&gt;

&lt;p&gt;Quando um &lt;code&gt;lvalue&lt;/code&gt; é precedido por um asterisco(&lt;code&gt;*&lt;/code&gt;), isso significa que todos ​​os adicionais &lt;code&gt;rvalues&lt;/code&gt; devem ser colocados em um &lt;code&gt;array&lt;/code&gt; e atribuído ao &lt;code&gt;lvalue&lt;/code&gt;. O valor atribuído a esse &lt;code&gt;lvalue&lt;/code&gt; é sempre um &lt;code&gt;array&lt;/code&gt;, e ele pode ter zero, um ou mais elementos:&lt;/p&gt;

&lt;p&gt;``` ruby Atribuição
x,*y = 1, 2, 3  # x=1; y=[2,3]
x,*y = 1, 2     # x=1; y=[2]
x,*y = 1        # x=1; y=[]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
No Ruby 1.8, um `splat` só pode preceder o `lvalue` passado na lista. No Ruby 1.9, do lado esquerdo de uma atribuição paralela pode incluem um operador `splat`, mas pode aparecer em qualquer posição na lista:

``` ruby Atribuição
# Ruby 1.9 somente
*x,y = 1, 2, 3  # x=[1,2]; y=3
*x,y = 1, 2     # x=[1]; y=2
*x,y = 1        # x=[]; y=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note-se que &lt;code&gt;splats&lt;/code&gt; pode aparecer em ambos os lados de uma expressão paralela de atribuição:&lt;/p&gt;

&lt;p&gt;```ruby Atribuição
x, y, *z = 1, *[2,3,4]  # x=1; y=2; z=[3,4].&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Finalmente, lembre-se que anteriormente descrevemos dois casos simples de atribuição paralela em que há um `lvalue` único ou uma única `rvalue`. Note-se que ambos os casos se comportam como se existe um `splat` antes da única `lvalue` ou `rvalue`. Explicitamente, incluindo um `splat` em nestes casos não tem qualquer efeito adicional.


&amp;lt;h5&amp;gt;Parênteses na atribuição paralelo&amp;lt;/h5&amp;gt;

Uma das características menos compreendidas da atribuição paralela é que o lado esquerdo pode usar parênteses para &amp;quot;sub atrobuição&amp;quot;. Se um grupo de dois ou mais `lvalues` ​​é colocado entre parênteses, então é inicialmente tratada como um `lvalue` único. Uma vez que o `rvalue` correspondente foi determinado, as regras de atribuição paralela são aplicadas recursivamente, o `rvalue` que é atribuído ao grupo de `lvalues` ​​que foi em parênteses. Considere o seguinte exercício:

```ruby Atribuição
x, (y, z) = a, b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este é efetivamente executam dois trabalhos ao mesmo tempo:&lt;/p&gt;

&lt;p&gt;```ruby Atribuição
x = a
y,z = b&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Mas note que a segunda tarefa é em si uma atribuição paralela. Como usamos parênteses no lado esquerdo, uma atribuição paralela recursiva é executada. Em ordem para que ele funcione, b deve ser um objeto `splattable` como um `array` ou `enumerador`.

Aqui estão alguns exemplos concretos que devem tornar isso mais claro. Note que os parênteses no ato da esquerda a &amp;quot;desembrulhar&amp;quot; um nível de `array` alinhado à direita:

```ruby Atribuição
x,y,z = 1,[2,3]             # Sem parenteses: x=1;y=[2,3];z=nil
x,(y,z) = 1,[2,3]           # Parenteses: x=1;y=2;z=3

a,b,c,d = [1,[2,[3,4]]]     # Sem parenteses: a=1;b=[2,[3,4]];c=d=nil
a,(b,(c,d)) = [1,[2,[3,4]]] # Parenteses: a=1;b=2;c=3;d=4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É isso aí amigos..&lt;/p&gt;

&lt;p&gt;Bons estudos e até a proxima! :D&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
