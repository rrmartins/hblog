<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Testes on Rodrigo Martins </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://rodij.me/categories/testes/</link>
    <language>en-us</language>
    
    <copyright>I&#39;m a Catholic Christian, software developer, Passionate about life, codes, questions, theories and theorems. :)</copyright>
    <updated>Sun, 04 Nov 2012 00:00:00 UTC</updated>
    
    <item>
      <title>teste salva sua carne</title>
      <link>http://rodij.me/post/2012/11/04/teste-salva-sua-carne/</link>
      <pubDate>Sun, 04 Nov 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/11/04/teste-salva-sua-carne/</guid>
      <description>

&lt;p&gt;Galera estou lendo mais um livro, e vou passar para vocês um textículo do inicio do &lt;a href=&#34;http://www.amazon.com/Rails-3-Action-Ryan-Bigg/dp/1935182277&#34;&gt;Rails 3 in Action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lendo o capitulo 1, ele deixou uma pergunta no ar: como você faz aplicações Rails sustentável?&lt;/p&gt;

&lt;p&gt;A resposta é que você escreve testes automatizados para a aplicação como você desenvolve, e você escreve isso &lt;strong&gt;o tempo todo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ao escrever testes automatizados para a sua aplicação, você pode rapidamente assegurar que o aplicativo está funcionando
como deveria. Se você não escrever testes, a sua alternativa seria a de verificar toda a aplicação manualmente, o que é
demorado e propício a erros. &lt;strong&gt;Teste automatizado economiza uma tonelada de tempo, a longo prazo e leva a menos bugs.&lt;/strong&gt; Os
seres humanos cometem erros; programas (se codificado corretamente) não.&lt;/p&gt;

&lt;h2 id=&#34;teste-e-desenvolvimento-orientado-a-comportamento&#34;&gt;Teste e desenvolvimento orientado a comportamento&lt;/h2&gt;

&lt;p&gt;No mundo &lt;code&gt;Ruby&lt;/code&gt; uma enorme ênfase é colocada em teste, especificamente  desenvolvimento orientado a testes (Test-driven
 development - TDD) e desenvolvimento de comportamentos (Behavior-Driven Development - BDD).&lt;/p&gt;

&lt;p&gt;Ao aprender técnicas de teste bem como agora, você tem um caminho sólido para se certificar que nada esta quebrado quando
você começa a escrever sua primeira aplicação real Rails. Se você não testar, não há como dizer o que poderia dar errado
seu código.&lt;/p&gt;

&lt;p&gt;TDD é uma metodologia que consiste em escrever um caso de teste falho primeiro (geralmente usando uma testar ferramenta
como &lt;code&gt;Test::Unit&lt;/code&gt;), em seguida, escrever o código para fazer o teste passar e, finalmente, refatorar o código. Este
processo é comumente chamado de &lt;code&gt;vermelho-verde-refatorar&lt;/code&gt;( &lt;code&gt;red-green-refactor&lt;/code&gt; ). As razões para desenvolver código desta
forma são duas. Primeiro, faz você considera como o código deve ser executado antes de ser usado por qualquer pessoa. Em
segundo lugar, crie um teste automatizado, você pode executar quantas vezes você quiser para garantir que o seu código ainda
está trabalhando como pretendido.&lt;/p&gt;

&lt;p&gt;BDD é uma metodologia baseada em TDD. Você escreve um teste automatizado para verificar a interação entre as diferentes
partes da base de código em vez de testar que cada parte funciona de forma independente.&lt;/p&gt;

&lt;p&gt;As duas ferramentas são usadas para o BDD são (RSpec)[&lt;a href=&#34;http://rspec.info/&#34;&gt;http://rspec.info/&lt;/a&gt;] e (Cucumber)[&lt;a href=&#34;http://cukes.info/&#34;&gt;http://cukes.info/&lt;/a&gt;].&lt;/p&gt;

&lt;h2 id=&#34;test-driven-development&#34;&gt;Test-Driven Development&lt;/h2&gt;

&lt;p&gt;Uma resposta enigmática mas verdadeira para a pergunta &amp;ldquo;Por que eu deveria testar?&amp;rdquo; é &amp;ldquo;porque você é humano.&amp;rdquo;. Os seres
humanos - a grande maioria deste livro - comete erros. É uma de nossas favoritas maneiras de aprender. Porque os
seres-humanos cometem erros, ter uma ferramenta para informar quando eles fazem um erro é útil, não é? Teste automatizado
fornece uma rápida segurança para informar aos desenvolvedores quando eles cometem erros. Por eles, é claro, queremos dizer
que você. Nós queremos que você faça poucos erros quanto possível. Queremos que salvar sua vida!&lt;/p&gt;

&lt;p&gt;TDD e BDD também dar-lhe tempo para pensar nas suas decisões antes de escrever qualquer código. Escrevendo primeiro teste
para a implementação, você é (ou, pelo menos, você deve ser) levado a pensar através da implementação: o código que você
vai escrever depois do teste e como você vai fazer para o teste passar. Se você encontrar um teste difícil de escrever,
então talvez a implementação pode ser melhorada. Infelizmente, não há nenhuma maneira clara de quantificar a dificuldade de
escrever um teste e trabalhar com ele para além de consultar outras pessoas que estão familiarizadas com o processo.&lt;/p&gt;

&lt;p&gt;Uma vez que o teste é implementado, você deve ir escrever algum código que o seu teste pode passar. Se você está
trabalhando escrevendo o código primeiro e depois os testes para pegar um bug da implementação, é geralmente melhor
repensar o teste e desfazer sua implementação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primeiro teste, código mais tarde.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Até mais amigos!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
