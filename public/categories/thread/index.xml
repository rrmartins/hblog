<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Thread on Rodrigo Martins </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://limitless-eyrie-46143.herokuapp.com/categories/thread/</link>
    <language>en-us</language>
    
    <copyright>I&#39;m a Catholic Christian, software developer, passionate about life, codes, questions, theories and theorems. :)</copyright>
    <updated>Sun, 04 Nov 2012 00:00:00 UTC</updated>
    
    <item>
      <title>threads e concorrencia exemplos de threads part iv number ruby 1 dot 9</title>
      <link>https://limitless-eyrie-46143.herokuapp.com/post/2012/11/04/threads-e-concorrencia-exemplos-de-threads-part-iv-number-ruby-1-dot-9/</link>
      <pubDate>Sun, 04 Nov 2012 00:00:00 UTC</pubDate>
      
      <guid>https://limitless-eyrie-46143.herokuapp.com/post/2012/11/04/threads-e-concorrencia-exemplos-de-threads-part-iv-number-ruby-1-dot-9/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar em um pouco de &lt;strong&gt;Threads e Concorrência&lt;/strong&gt; agora &lt;strong&gt;Exemplos de Threads&lt;/strong&gt;&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;exemplos-de-threads&#34;&gt;Exemplos de Threads&lt;/h4&gt;

&lt;p&gt;Agora que já passamos alguns post falando do modelo &lt;code&gt;Thread&lt;/code&gt; e da API de &lt;code&gt;Thread&lt;/code&gt; em Ruby, vamos dar uma olhada em alguns
exemplos reais de vários códigos de &lt;code&gt;threads&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;leitura-de-arquivos-simultaneamente&#34;&gt;Leitura de arquivos simultaneamente&lt;/h3&gt;

&lt;p&gt;O uso mais comum de &lt;code&gt;threads&lt;/code&gt; de Ruby é em programas que são IO. Eles permitem que os programas mantenham ocupado até
mesmo enquanto espera por alguma entrada do usuário, o sistema de arquivos, ou da rede. A seguir de código, por exemplo,
define um método &lt;code&gt;conread&lt;/code&gt; (para leitura simultânea) que leva uma série de nomes de arquivos e retorna um mapa de &lt;code&gt;hash&lt;/code&gt;
com esses nomes para o conteúdo desses arquivos. Ele usa &lt;code&gt;thread&lt;/code&gt; para ler esses arquivos ao mesmo tempo, e é realmente
destinado a ser utilizado com o módulo &lt;code&gt;open-uri&lt;/code&gt;, que permite que as URL&amp;rsquo;s &lt;code&gt;HTTP&lt;/code&gt; e &lt;code&gt;FTP&lt;/code&gt; possam ser abertas com
&lt;code&gt;Kernel.open&lt;/code&gt; e ler como se fossem arquivos:&lt;/p&gt;

&lt;p&gt;```ruby Lendo arquivos&lt;/p&gt;

&lt;h1 id=&#34;ler-arquivos-simultaneamente-use-com-o-módulo-open-uri-para-buscar-urls&#34;&gt;Ler arquivos simultaneamente. Use com o módulo &amp;ldquo;open-uri&amp;rdquo; para buscar URLs.&lt;/h1&gt;

&lt;h1 id=&#34;passe-uma-matriz-de-nomes-de-arquivos-retorna-um-mapa-de-nomes-de-arquivos-de-hash-para-o-conteúdo&#34;&gt;Passe uma matriz de nomes de arquivos. Retorna um mapa de nomes de arquivos de hash para o conteúdo.&lt;/h1&gt;

&lt;p&gt;def conread(filenames)
  h = {}            # hash vazio de resultados&lt;/p&gt;

&lt;p&gt;# Crie uma linha para cada arquivo
  filenames.each do |filename|      # Para cada arquivo chamado
    h[filename] = Thread.new do     # Criar um fio, mapa para filename
      open(filename) {|f| f.read }  # Abra e leia o arquivo
    end                             # valor da linha é o conteúdo do arquivo
  end&lt;/p&gt;

&lt;p&gt;  # Percorre o hash, à espera de cada thread para completar.
  # Substitua a thread no hash com o seu valor (o conteúdo de arquivo)
  h.each_pair do |filename, thread|
    begin
      h[filename] = thread.value    # Mapa de nomes ao conteúdo do arquivo
    rescue
      h[filename] = $!              # Ou a exceção levantada
    end
  end
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Servidor A Multithreads

Outra, quase canônico caso, o uso de `threads` é para escrever servidores que podem comunicar com mais do que um cliente
de cada vez. Vimos como fazer isto utilizando multiplexagem com Kernel.select, mas um pouco mais simples (Embora
possivelmente menos escalável) solução usa `threads`:

```ruby Servidor a Multithreads
require &#39;socket&#39;

# Este método espera um socket ligado a um cliente.
# Ele lê as linhas do cliente, inverte-los e envia-los de volta.
# Múltiplas Threads podem executar este método, ao mesmo tempo.
def handle_client(c)
  while true
    input = c.gets.chop     # Ler uma linha de entrada do cliente
    break if !input         # sai se tem muitas entradas
    break if input==&amp;quot;quit&amp;quot;  # ou se o cliente pede
    c.puts(input.reverse)   # Caso contrário, responde ao cliente.
    c.flush                 # Força a saída para fora
  end
  c.close                   # Fecha o socket cliente
end

server = TCPServer.open(2000) # Ouve na porta 2000

while true                    # Laço de servidores para sempre
  client = server.accept      # Espere um cliente para conectar
  Thread.start(client) do |c| # Inicia uma nova thread
    handle_client(c)          # E Lida com o clinete nessa Thread
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iteradores-simultâneas&#34;&gt;Iteradores simultâneas&lt;/h3&gt;

&lt;p&gt;Embora tarefas IO são o caso de uso típico para &lt;code&gt;threads&lt;/code&gt; de Ruby, eles não se restringem aos que usam. O código a seguir
adiciona um método &lt;code&gt;conmap&lt;/code&gt; (por mapa concorrente) para o modulo &lt;code&gt;Enumerável&lt;/code&gt;. Ele funciona como mapa, mas processa cada
elemento da matriz de entrada com uma distinta &lt;code&gt;Thread&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;```ruby Iterador Simultâneo
module Enumerable           # Abre o módulo Enumerable
  def conmap(&amp;amp;block)        # Define um novo método que espera um block
    threads = []            # Começa com uma matriz vazia de threads
    self.each do |item|     # Para cada item enumerable
      # Chama o bloco em uma nova Thread, e lembra da Thread
      threads &amp;lt;&amp;lt; Thread.new { block.call(item) }
    end
    # Agora mapea o conjunto de Threads para os seus valores
    threads.map {|t| t.value } # E retorna a matriz de valores
  end
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
E aqui está uma versão concorrente similar do iterador de cada um:

```ruby Módulo Enumerable
module Enumerable
  def concurrently
    map {|item| Thread.new { yield item }}.each {|t| t.join }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O código é sucinto e desafiador: se você pode fazer sentido, você está bem em seu caminho para o domínio da sintaxe de
Ruby e iteradores Ruby.&lt;/p&gt;

&lt;p&gt;Lembre-se que no Ruby 1.9, iteradores padrões que não são passado um bloco retorna um objeto enumerador. Isto significa
que, dado o método &lt;code&gt;concurrently&lt;/code&gt; definido mais cedo e um objeto &lt;code&gt;Hash h&lt;/code&gt;, podemos escrever:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby Método Concurrently
h.each_pair.concurrently {|*pair| process(pair)}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Até o proximo amigos!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>threads e concorrencia escalando threads part iii number ruby 1 dot 9</title>
      <link>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-escalando-threads-part-iii-number-ruby-1-dot-9/</link>
      <pubDate>Sun, 28 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-escalando-threads-part-iii-number-ruby-1-dot-9/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar em um pouco de &lt;strong&gt;Threads e Concorrência&lt;/strong&gt; agora &lt;strong&gt;Escalando Threads&lt;/strong&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;threads-e-concorrência&#34;&gt;Threads e Concorrência&lt;/h2&gt;

&lt;h3 id=&#34;escalando-threads&#34;&gt;Escalando Threads&lt;/h3&gt;

&lt;p&gt;Intérpretes do Ruby(irb), muitas vezes têm mais &lt;code&gt;threads&lt;/code&gt; para executar do que há CPU tem disponível para executá-los. Quando
o processamento paralelo verdadeiro não é possível, é simulado através da partilha de uma CPU entre &lt;code&gt;threads&lt;/code&gt;. O processo para
a partilha de uma CPU entre as &lt;code&gt;threads&lt;/code&gt; é chamado de escalonamento de &lt;code&gt;threads&lt;/code&gt;. Dependendo da implementação e plataforma,
agendamento de &lt;code&gt;threads&lt;/code&gt; pode ser feito pelo Intérprete do Ruby(irb), ou pode ser tratado pelo sistema operacional.&lt;/p&gt;

&lt;h4 id=&#34;prioridades-da-thread&#34;&gt;Prioridades da Thread&lt;/h4&gt;

&lt;p&gt;O primeiro fator que afeta o agendamento de &lt;code&gt;threads&lt;/code&gt; é prioridades de &lt;code&gt;thread&lt;/code&gt;: com a alta prioridade da &lt;code&gt;thread&lt;/code&gt; são
agendadas antes de baixa prioridade de &lt;code&gt;thread&lt;/code&gt;. Mais precisamente, uma &lt;code&gt;thread&lt;/code&gt; só vai ficar o tempo de CPU, se não houver
maior prioridade de &lt;code&gt;thread&lt;/code&gt; aguardando para ser executada.&lt;/p&gt;

&lt;p&gt;Definir e consultar a prioridade de um objeto Ruby &lt;code&gt;Thread&lt;/code&gt; com &lt;code&gt;priority=&lt;/code&gt; e &lt;code&gt;priority&lt;/code&gt;. Note-se que não há nenhuma maneira
de definir a prioridade de uma &lt;code&gt;thread&lt;/code&gt; antes que ela comece a funcionar. Uma &lt;code&gt;thread&lt;/code&gt; pode, no entanto, aumentar ou diminuir
sua própria prioridade como a primeira ação que toma.&lt;/p&gt;

&lt;p&gt;Uma &lt;code&gt;thread&lt;/code&gt; recém-criada começa com a mesma prioridade que a &lt;code&gt;thread&lt;/code&gt; que a criou. A &lt;code&gt;thread&lt;/code&gt; principal começa na prioridade
 0.&lt;/p&gt;

&lt;p&gt;Como muitos aspectos de &lt;code&gt;threading&lt;/code&gt;, prioridades de &lt;code&gt;threads&lt;/code&gt; são depende da implementação do &lt;code&gt;Ruby&lt;/code&gt; e do subjacente sistema
operacional. No Linux, por exemplo, &lt;code&gt;threads&lt;/code&gt; não privilegiadas não pode ter as suas prioridades levantada ou abaixada. Assim,
no Ruby 1.9 (que usa &lt;code&gt;threads&lt;/code&gt; nativas) no &lt;code&gt;Linux&lt;/code&gt;, a definição de prioridades de &lt;code&gt;Thread&lt;/code&gt; é ignorada.&lt;/p&gt;

&lt;h4 id=&#34;aquisição-de-thread-e-thread-pass&#34;&gt;Aquisição de Thread e Thread.pass&lt;/h4&gt;

&lt;p&gt;Quando várias &lt;code&gt;Threads&lt;/code&gt; com a mesma prioridade precisam compartilhar a CPU, cabe a &lt;code&gt;thread&lt;/code&gt; programada para decidir quando e
por quanto tempo, cada &lt;code&gt;thread&lt;/code&gt; é executada. Alguns escalonadores são antecipadas, o que significa que elas permitem a &lt;code&gt;thread&lt;/code&gt;
a ser executada apenas por um determinado período de tempo antes de permitir outra &lt;code&gt;thread&lt;/code&gt; da mesma prioridade para ser
executada. Outros programadores não são preempção: uma vez que uma &lt;code&gt;thread&lt;/code&gt; começa a correr, ela continua funcionando a menos
que durma, blocos para I/O, ou uma &lt;code&gt;thread&lt;/code&gt; de maior prioridade acorda.&lt;/p&gt;

&lt;p&gt;Se uma longa linha de computação liga (ou seja, aquela que nunca faz bloqueio para I/O) está em execução em um agendador
não preemptivo, ela vai &amp;ldquo;morrer de fome&amp;rdquo; as outras &lt;code&gt;threads&lt;/code&gt; com a mesma prioridade, e elas nunca tem a chance de correr.
Para evitar esse problema, de longa duração &lt;code&gt;compute-bound&lt;/code&gt; &lt;code&gt;threads&lt;/code&gt; devem chamar periodicamente &lt;code&gt;Thread.pass&lt;/code&gt; para pedir o
programador para produzir a CPU para outra &lt;code&gt;thread&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Até a proxima amigos! :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>threads e concorrencia part i number ruby 1 dot 9</title>
      <link>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-part-i-number-ruby-1-dot-9/</link>
      <pubDate>Sun, 28 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-part-i-number-ruby-1-dot-9/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar em um pouco de &lt;strong&gt;Threads e Concorrência&lt;/strong&gt; agora &lt;strong&gt;Thread Lifecycle&lt;/strong&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;threads-e-concorrência&#34;&gt;Threads e Concorrência&lt;/h2&gt;

&lt;p&gt;Programas tradicionais têm uma única &amp;ldquo;thread de execução&amp;rdquo;: as declarações ou instruções que compõem o programa são executadas
sequencialmente até que o programa termina. Um programa multithread tem mais de uma &lt;code&gt;thread&lt;/code&gt; de execução. Dentro de cada &lt;code&gt;
thread&lt;/code&gt;, os comandos são executados sequencialmente, mas as próprias &lt;code&gt;threads&lt;/code&gt; podem ser executadas em paralelo em uma
CPU multicore, por exemplo. Frequentemente (em um núcleo único, uma única CPU, por exemplo), várias &lt;code&gt;Threads&lt;/code&gt; não são na
realidade executadas em paralelo, mas o paralelismo é simulada intercalando a execução das &lt;code&gt;threads&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Programas como o software de processamento de imagem que fazem um monte de cálculos estão a ser dito &lt;code&gt;compute-bound&lt;/code&gt;. Eles só
podem beneficiar de multithreading, se há realmente múltiplas CPUs para executar os cálculos em paralelo. A maioria dos
programas não são totalmente vinculados a computação, no entanto. Muitos, como navegadores web, passam a maior parte de seu
tempo de espera para a rede ou arquivo &lt;code&gt;I/O&lt;/code&gt;. Programas como estes estão a ser dito &lt;code&gt;IO-bound&lt;/code&gt;. Programas &lt;code&gt;IO-bound&lt;/code&gt; pode ser
útil mesmo quando várias &lt;code&gt;threads&lt;/code&gt; há apenas uma única CPU disponível. Um navegador pode tornar uma imagem em uma &lt;code&gt;thread&lt;/code&gt;
enquanto outra &lt;code&gt;thread&lt;/code&gt; está à espera para a próxima imagem para ser baixada da rede.&lt;/p&gt;

&lt;p&gt;Ruby faz com que seja fácil de escrever programas &lt;code&gt;multi-threaded&lt;/code&gt; com a &lt;code&gt;Class Thread&lt;/code&gt;. Para iniciar uma nova &lt;code&gt;thread&lt;/code&gt;,
apenas associa um bloco com uma chamada para &lt;code&gt;Thread.new&lt;/code&gt;. Uma nova &lt;code&gt;thread&lt;/code&gt; será criada para executar o código no bloco, e a
&lt;code&gt;thread&lt;/code&gt; original retornará do &lt;code&gt;Thread.new&lt;/code&gt; imediatamente e continuar a execução com a afirmação seguinte:&lt;/p&gt;

&lt;p&gt;```ruby Iniciando um thread&lt;/p&gt;

&lt;h1 id=&#34;thread-1-está-sendo-executado-aqui&#34;&gt;Thread #1 está sendo executado aqui&lt;/h1&gt;

&lt;p&gt;Thread.new {
  # Thread #2 executa esse código
}&lt;/p&gt;

&lt;h1 id=&#34;thread-1-executa-esse-código&#34;&gt;Thread #1 executa esse código&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;
Vamos começar nossa cobertura de `threads` explicando o modelo `Thread` de Ruby e API em alguns detalhes. Estas seções
introdutórias explicam as coisas como ciclo de vida da `thread`, agendamento de threads, e os estados da `thread`. Com que o
material introdutório como pré-requisito, passamos a apresentar código de exemplo e para cobrir `threads` avançadas como
sincronização de `threads`.

Finalmente, é importante notar que os programas de Ruby também pode alcançar simultaneidade ao nível do processo de sistema
operacional executando executáveis externos ​​ou novas cópias de bifurcação do interpretador Ruby. Fazendo isto é dependem do
sistema operacional. Para mais informações, use `ri` para procurar os métodos `Kernel.system`, `Kernel.exec`, `Kernel.fork`,
`IO.popen`, e o módulo `Process`.

### Lifecycle Tópico

Como descrito acima, novas `threads` são criados com `Thread.new`. Você também pode usar os sinónimos `Thread.start` e
`Thread.fork`. Não há necessidade de se iniciar uma `thread` depois de criá-la, ele começa a ser executado automaticamente
quando os recursos da CPU estejam disponíveis. O valor da invocação `Thread.new` é um objeto `Thread`. A classe `Thread`
define um número de métodos para consultar e manipular a `thread` enquanto ela está sendo executada.

Uma `thread` é executa o código do bloco associado à chamada para `Thread.new` e depois pára execução. O valor da última
expressão em que o bloco é o valor da `thread`, e pode ser obtido chamando o método do valor do objeto `Thread`. Se a `thread`
foi executado para conclusão, então o valor retorna o valor da `thread` de imediato. Caso contrário, os blocos de valor do
método e não retorna até que a `threado` for concluída.

O método de classe `Thread.current` retorna o objeto `Thread` que representa o atual `thread`. Isso permite que as `threads`
manipulam-se. O método da classe `Thread.main` retorna o objeto `Thread` que representa a principal `thread`, este é a
`thread` inicial de execução que começou quando o Programa Ruby foi iniciado.

#### A Thread principal

A `Thread` principal é especial: o interpretador Ruby pára de correr quando a `thread` principal é feita. Ele faz isso mesmo
que a `thread` principal criou outras `threads` que ainda estão em execução. Você deve garantir, portanto, que a sua princial
`thread` não termina enquanto outras `threads` ainda estão em execução. Uma maneira de fazer isso é escrever sua `thread`
principal sob a forma de um `loop` infinito. Outra maneira é explicitamente esperar para as `threads` ser concluída. Já
mencionamos que você pode chamar o método `value` de uma `thread` que espera que ela termine. Se você não se importa com o
valor de suas `threads`, você pode esperar com o método de instancia `join`.

O seguinte método espera até que todas as linhas, com excepção da `thread` principal e a `thread` atual (que pode ser a mesma
coisa), ter saído:

``` ruby Thread Principal
def join_all
  main = Thread.main        # Thread Principal
  current = Thread.current  # Thread atual
  all = Thread.list         # Todas as threads ainda em execução
  # Agora chama join em cada thread
  all.each {|t| t.join unless t == current or t == main }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;threads-e-exceções-não-tratadas&#34;&gt;Threads e exceções não tratadas&lt;/h4&gt;

&lt;p&gt;Se uma exceção é levantada na &lt;code&gt;thread&lt;/code&gt; principal, e não é tratada em qualquer lugar, o interpretador Ruby imprime uma
mensagem e sai. Em outras &lt;code&gt;threads&lt;/code&gt; que a &lt;code&gt;thread&lt;/code&gt; principal, exceções não tratadas causam a &lt;code&gt;thread&lt;/code&gt; para parar de executar.
Por defeito, no entanto, isto não faz o intérprete para imprimir uma mensagem ou saída. Se uma &lt;code&gt;thread&lt;/code&gt; &lt;code&gt;t&lt;/code&gt; sai por causa de
uma exceção não tratada, e outra &lt;code&gt;thread&lt;/code&gt; de chamadas &lt;code&gt;t.join&lt;/code&gt; ou &lt;code&gt;t.value&lt;/code&gt;, então a exceção que ocorreu em &lt;code&gt;t&lt;/code&gt; é levantada
na &lt;code&gt;thread&lt;/code&gt; de &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se você gostaria de qualquer exceção não tratada em qualquer &lt;code&gt;thread&lt;/code&gt; para fazer com que o intérprete saia, use o método de
classe &lt;code&gt;Thread.abort_on_exception=&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;```ruby Thread
Thread.abort_on_exception = true&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Se você quer uma exceção não tratada em uma `thread` específica faz com que o intérprete saia, utilizando o método de
exemplo, através do mesmo nome:

```ruby Thread abort
t = Thread.new { ... }
t.abort_on_exception = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É isso ai amigos.. até a proxima!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>threads e concorrencia threads e variaveis part ii number ruby 1 dot 9</title>
      <link>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-threads-e-variaveis-part-ii-number-ruby-1-dot-9/</link>
      <pubDate>Sun, 28 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>https://limitless-eyrie-46143.herokuapp.com/post/2012/10/28/threads-e-concorrencia-threads-e-variaveis-part-ii-number-ruby-1-dot-9/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar em um pouco de &lt;strong&gt;Threads e Concorrência&lt;/strong&gt; agora &lt;strong&gt;Threads e Variáveis&lt;/strong&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;threads-e-concorrência&#34;&gt;Threads e Concorrência&lt;/h2&gt;

&lt;h3 id=&#34;threads-e-variáveis&#34;&gt;Threads e Variáveis&lt;/h3&gt;

&lt;p&gt;Uma das características-chave de &lt;code&gt;Thread&lt;/code&gt; é que elas podem compartilhar o acesso a variáveis. Como &lt;code&gt;Threads&lt;/code&gt; são definidas
por blocos, eles têm acesso a qualquer que seja variáveis ​​(variáveis ​​locais, variáveis ​​de instância, variáveis ​​globais e
 assim por diante) estão no escopo do bloco:&lt;/p&gt;

&lt;p&gt;``` ruby Thread e Variavel
x = 0&lt;/p&gt;

&lt;p&gt;t1 = Thread.new do
  # Esta Thread pode consultar e definir a variável x
end&lt;/p&gt;

&lt;p&gt;t2 = Thread.new do
  # Esta Thread e também consulta e seta x
  # E pode consultar e definir T1 e T2 também.
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Quando dois ou mais `Thread` de ler e escrever as mesmas variáveis ao mesmo tempo, elas devem tomar cuidado para que elas o
fazem corretamente. Nós vamos ter mais a dizer sobre isso quando consideramos a sincronização de `threads` abaixo.

#### Thread-privadas variáveis

Variáveis ​​definidas dentro do bloco de uma `thread` são particulares para essa `thread` e não são visíveis para qualquer
outra `thread`. Isto é simplesmente consequência de regras de variáveis de escopo ​​Ruby.

Muitas vezes queremos uma `Thread` tenha sua própria cópia privada de uma variável de modo a que o seu comportamento não se
altere se o valor do referido mude de variáveis. Considere o seguinte código, que tenta criar três tópicos que impressão (
respectivamente) os números 1, 2 e 3:

``` ruby Threads Privadas
n = 1
while n &amp;lt;= 3
  Thread.new { puts n }
  n += 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Em algumas circunstâncias, em algumas implementações, este código pode funcionar como o esperado e imprimir os números 1, 2 e
3. Em outras circunstâncias, ou em outras implementações, talvez não. É perfeitamente possível (se tópicos recentemente
criados não executa de imediato) para o código imprimir 4, 4, e 4, por exemplo. Cada thread lê uma cópia compartilhada da
variável n, e o valor ds mudanças de variáveis ​​como o loop é executado. O valor impresso pela &lt;code&gt;thread&lt;/code&gt; depende de quando esse
segmento é executado em relação para a thread pai.&lt;/p&gt;

&lt;p&gt;Para resolver este problema, passamos o valor atual de n para o método &lt;code&gt;Thread.new&lt;/code&gt;, e atribuimos o atual valor da variável a
um parâmetro de bloco. Parâmetros de bloco são privados para o bloco, e este valor particular não é partilhado entre tópicos:&lt;/p&gt;

&lt;p&gt;``` ruby Threads Privadas
n = 1
while n &amp;lt;= 3
  # Obtem uma cópia privada do valor atual de n em x
  Thread.new(n) {|x| puts x }
  n += 1
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Note-se que temos uma outra forma de resolver este problema é a utilização de um iterador em vez de um loop `while`. Neste
caso, o valor de `n` é modificado para particular para o bloco externo e nunca durante a execução desse bloco:

```ruby Thread Privada com Interator
1.upto (3) {| n | Thread.new {puts n}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;variáveis-de-threads-locais&#34;&gt;Variáveis ​​de Threads locais&lt;/h4&gt;

&lt;p&gt;Algumas das variáveis especiais globais de Ruby são &lt;code&gt;thread&lt;/code&gt; local: elas podem ter valores diferentes em &lt;code&gt;threads&lt;/code&gt; diferentes.
&lt;code&gt;$SAFE&lt;/code&gt; e &lt;code&gt;$~&lt;/code&gt; são exemplos. Isto significa que, se dois &lt;code&gt;thread&lt;/code&gt; estão realizando conconrrencia de expressão regular ao mesmo
tempo, eles vão ver diferentes valores de &lt;code&gt;$~&lt;/code&gt;, e a realização de um jogo em um fio não irá interferir com os resultados de
um jogo executado na outra discussão.&lt;/p&gt;

&lt;p&gt;A classe &lt;code&gt;Thread&lt;/code&gt; provê &lt;code&gt;hash-like&lt;/code&gt; como o comportamento. Ele define métodos de instância &lt;code&gt;[]&lt;/code&gt; e &lt;code&gt;[]=&lt;/code&gt; que permitem associar
valores arbitrários com qualquer símbolo. (Se você usar uma cadeia de caracteres em vez disso, ele será convertido em um
símbolo. Ao contrário &lt;code&gt;hashs&lt;/code&gt; de verdade, a classe &lt;code&gt;Thread&lt;/code&gt; só permite símbolos como chaves.) Os valores associados a estes
símbolos comportam-se como variáveis ​​de &lt;code&gt;Thread&lt;/code&gt; locais. Eles não são privados como variáveis de block ​​locais porque qualquer
&lt;code&gt;Thread&lt;/code&gt; pode pesquisar um valor em qualquer outra &lt;code&gt;Thread&lt;/code&gt;. Mas eles não são variáveis partilhadas, uma vez que cada Thread
pode ter a sua própria cópia.&lt;/p&gt;

&lt;p&gt;Como exemplo, suponha que nós criamos &lt;code&gt;thread&lt;/code&gt; para download de arquivos de um servidor web. A &lt;code&gt;Thread&lt;/code&gt; principal pode querer
monitorar o progresso do download. Para permitir isso, cada &lt;code&gt;Thread&lt;/code&gt; pode fazer o seguinte:&lt;/p&gt;

&lt;p&gt;```ruby Thread de progresso
Thread.current[:progress] = bytes_received&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
A `Thread` principal poderia, então, determinar o total de bytes baixado com um código como este:

```ruby Thread de progresso
total = 0
download_threads.each {|t| total += t[:progress] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Junto com &lt;code&gt;[]&lt;/code&gt; e &lt;code&gt;[]=&lt;/code&gt;, &lt;code&gt;Thread&lt;/code&gt; também define um método &lt;code&gt;key?&lt;/code&gt; para testar se uma determinada chave existe para uma discussão
. Os métodos &lt;code&gt;keys&lt;/code&gt; retorna uma matriz de símbolos que representam as chaves definidas para a &lt;code&gt;Thread&lt;/code&gt;. Este código pode ser
melhor escrito como se segue, de modo que ela trabalhe de tópicos que ainda não começou a correr e não tenha definido a chave
:progress ainda:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby Thread de progresso
total = 0
download_threads.each {|t| total += t[:progress] if t.key?(:progress)}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Até a proxima galera! :D&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
