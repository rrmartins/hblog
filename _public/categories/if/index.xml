<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>If on Rodrigo Martins </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://rodij.me/categories/if/</link>
    <language>en-us</language>
    
    <copyright>I&#39;m a Catholic Christian, software developer, passionate about life, codes, questions, theories and theorems. :)</copyright>
    <updated>Mon, 18 Jun 2012 00:00:00 UTC</updated>
    
    <item>
      <title>demonstracoes e estruturas de controle</title>
      <link>http://rodij.me/post/2012/06/18/demonstracoes-e-estruturas-de-controle/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rodij.me/post/2012/06/18/demonstracoes-e-estruturas-de-controle/</guid>
      <description>

&lt;p&gt;Hoje vamos continuar falando de &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.2/&#34;&gt;Ruby&lt;/a&gt;, é hora de nos aprofundar falando um pouco de Demonstrações e estruturas de controle&lt;/p&gt;

&lt;h1&gt;Demonstrações e estruturas de controle&lt;/h1&gt;

&lt;p&gt;Considere o programa Ruby seguinte. Acrescenta dois números passados ​​para na linha de comando e imprime a soma:&lt;/p&gt;

&lt;p&gt;``` ruby Programa Simples
x = ARGV[0].to_f # Converter primeiro argumento para um número
y = ARGV[1].to_f # Converter segundo argumento para um número
soma = x + y # Adicione os argumentos
puts soma # Imprimir a soma&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Este é um programa simples que consiste essencialmente em invocar variável de atribuição e método. O que o torna
particularmente simples é sua execução puramente seqüencial. As quatro linhas de código são executadas uma após a outra
sem ramificação ou repetição. É um programa raro que pode ser tão simples.


&amp;lt;h3&amp;gt;Condicionais&amp;lt;/h3&amp;gt;

A estrutura de controle mais comum, em qualquer linguagem de programação, é a condicional. Esta é uma forma de dizer ao
computador para condicionalmente executar alguns códigos: para executar ele, só se alguma condição for satisfeita.
A condição é uma expressão, se for avaliada como qualquer valor diferente de falso ou nulo, então a condição é satisfeita.

Ruby tem um vocabulário rico para expressar condicionais. Algumas sintaxes são descritas abaixo. Ao escrever código Ruby,
você pode escolher o que parece mais elegante para a tarefa.


&amp;lt;h5&amp;gt;if&amp;lt;/h5&amp;gt;

Ele é a mais simples das condicionais. Em sua forma mais simples, parece que isso:

``` ruby Condicional IF
if expression
  code
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O código entre &lt;code&gt;if&lt;/code&gt; e &lt;code&gt;end&lt;/code&gt;é executado se (e somente se) o &lt;code&gt;expression&lt;/code&gt; é avaliada como algo diferente que &lt;code&gt;falso&lt;/code&gt; ou
&lt;code&gt;nulo&lt;/code&gt;. O código deve ser separado a partir da expressão com uma nova linha ou ponto e vírgula ou a palavra-chave, em
seguida. Aqui estão duas maneiras de escrever a mesma condicional &lt;code&gt;if&lt;/code&gt; de forma simples:&lt;/p&gt;

&lt;p&gt;```ruby Condicional IF&lt;/p&gt;

&lt;h1 id=&#34;se-x-é-menor-que-10-incrementá-lo&#34;&gt;Se x é menor que 10, incrementá-lo&lt;/h1&gt;

&lt;p&gt;if x &amp;lt; 10 # nova linha de separação
  x + = 1
end
if x &amp;lt; 10 then x += 1 end # the separato&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Você também pode usar `then` como o símbolo de separação, e segui-lo com uma nova linha. Isso torna o seu código robusto.

``` ruby Condicional IF
if x &amp;lt; 10 then
  x + = 1
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Os programadores que estão acostumados a C, ou linguagens cuja sintaxe é derivada de C, deve observar duas coisas
importantes sobre if no Ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parênteses não é necessário (e normalmente não utilizado) em torno da expressão condicional. O ponto e vírgula, quebra
de linha, ou então palavra-chave serve para delimitar a expressão.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A palavra-chave &lt;code&gt;end&lt;/code&gt; é exigida, mesmo quando o código a ser executado condicionalmente consiste de uma única instrução.
A forma modificador do &lt;code&gt;if&lt;/code&gt;, descrito abaixo, fornece uma maneira para gravar condicionais simples sem a palavra-chave &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;else&lt;/h5&gt;

&lt;p&gt;Uma declaração &lt;code&gt;if&lt;/code&gt; pode incluir uma cláusula &lt;code&gt;else&lt;/code&gt; para especificar o código para ser executado se a condição não é
&lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;``` ruby Condicional else
if expression
  code
else
  code
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
O código entre `if` e `else` é executado se `expression` é avaliada como qualquer outra coisa que `false` ou `nil`. Caso
contrário (se expression é `false` ou `nil`), o código entre o `else` e o `end` é executado. Como na forma simples
de `if`, na expressão deve ser separado do código que o segue por uma nova linha, um ponto e vírgula, ou a palavra-chave `then`. As palavras-chave `else` e `end`, totalmente delimitam o segundo pedaço de código, e sem novas linhas ou
delimitadores adicionais são exigido.

Aqui é um exemplo de um condicional que inclui uma cláusula `else`:

``` ruby Condicional if - else
if dados # Se o array existe
  dados &amp;lt;&amp;lt; x # em seguida, acrescentar um valor a ela.
else # Caso contrário ...
  data = [x] # criar uma nova matriz que contém o valor.
end # Este é o fim do condicional
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;elsif&lt;/h5&gt;

&lt;p&gt;Se você quiser testar mais de uma condição dentro de uma condicional, você pode adicionar um ou mais cláusulas &lt;code&gt;elsif&lt;/code&gt;
entre um &lt;code&gt;if&lt;/code&gt; e um &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;elsif&lt;/code&gt; é uma forma abreviada de &lt;code&gt;else if&lt;/code&gt;. Note que há apenas um &lt;code&gt;else&lt;/code&gt; em &lt;code&gt;elsif&lt;/code&gt;. A condicional &lt;code&gt;elsif&lt;/code&gt; usando parecido com este:&lt;/p&gt;

&lt;p&gt;```ruby Expressão elsif
if expression1
  code1
elsif expression2
  code2
      .
      .
      .
elsif expressionN
  codeN
else
  code
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Se `expression1` for avaliado não sendo `false` ou `nil`, então `code1` é executado. Caso contrário, `expression2` é
avaliada. Se for outra coisa senão `false` ou `nil`, então code2 é executado. Este processo continua até que uma expressão
é avaliada como algo diferente de `false` ou `nil`, ou até que todas as cláusulas `elsif` foram testadas. Se a expressão
associada com a última cláusula `elsif` for `false` ou `nil`, e da cláusula `elsif` é seguido por uma cláusula `else`, em
seguida, o código entre `else` e no `end` é executado. Se nenhuma cláusula mais está presente, em seguida, nenhum código é
executado.

`elsif` é como se: a expressão deve ser separada do código por uma nova linha, uma vírgula ou uma palavra-chave, em seguida
. Aqui é um exemplo de uma multi condicional usando `elsif`:

```ruby Condicional elsif
if x == 1
  name = &amp;quot;um&amp;quot;
elsif x == 2
  name = &amp;quot;dois&amp;quot;
elsif x == 3 then name = &amp;quot;três&amp;quot;
elsif x == 4; name = &amp;quot;quatro&amp;quot;
else
  name = &amp;quot;muitos&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Valor de retorno&lt;/h5&gt;

&lt;p&gt;Na maioria das linguagens, a condicional &lt;code&gt;if&lt;/code&gt; é uma afirmação. Em Ruby, no entanto, tudo é uma expressão, mesmo as
estruturas de controle que são comumente chamadas de declarações. O valor &lt;code&gt;return&lt;/code&gt; de uma &amp;ldquo;declaração&amp;rdquo; &lt;code&gt;if&lt;/code&gt;, é o valor da
última expressão no código que foi executado, ou &lt;code&gt;nil&lt;/code&gt; se nenhum bloco de código foi executado.&lt;/p&gt;

&lt;p&gt;O fato de que, as declarações &lt;code&gt;if&lt;/code&gt; devolvem um valor significa que, por exemplo, a muilti condicional mostrado
anteriormente pode ser elegantemente reescrito como este abaixo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby Valor de Retorno
name = if x == 1 then &amp;quot;um&amp;quot;
       elsif x == 2 then &amp;quot;dois&amp;quot;
       elsif x == 3 then &amp;quot;três&amp;quot;
       elsif x == 4 then &amp;quot;quatro&amp;quot;
       else &amp;quot;muitos&amp;quot;
       end
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;É isso aí amigos..&lt;/p&gt;

&lt;p&gt;Bons estudos e até a proxima! :D&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
